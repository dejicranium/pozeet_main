<!DOCTYPE html>
<html>
<head>
	<title>Home - Mobile</title>
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<link href='https://fonts.googleapis.com/css?family=Open+Sans' rel='stylesheet'/>
	<link href='https://fonts.googleapis.com/css?family=Merriweather+Sans' rel='stylesheet'/>
	<link href='https://fonts.googleapis.com/css?family=Libre+Franklin' rel='stylesheet'/>
	<link href='https://fonts.googleapis.com/css?family=Roboto' rel='stylesheet'/>
	<link rel="stylesheet" href="{{request.static_url('repoll:static/styles.css') }}"/>
	<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.2.0/css/all.css" integrity="sha384-hWVjflwFxL6sNzntih27bfxkr27PmbbK/iSvJ+a4+0owXq79v+lsFkW54bOGbiDQ" crossorigin="anonymous"/>

	<style>

			#container{
			position: absolute;
			top:50px;
			width: 100%;


		}
			#navbar{
			display:flex;
			padding: 10px 10px 10px 10px;
			width:100%;
			min-height: 35px;
			background-color: white;
			position: fixed;
			top:0;
			flex-direction: row;
			box-shadow: 0px 0px 2px 0px grey;
			margin-bottom: 10px;
			z-index: 5;
			box-sizing:border-box;

		}
		#navbar h1{
			font-size: 10vw;
			text-align: center;

		}


		.navbar-actions{
			position: absolute;
			display: flex;
			right: 0;
			flex-direction: row;
		}

		.nabar-actions ul{
			text-decoration:none;
			display:flex;
			flex-direction: row;
		}


		.navbar-actions button{
			display: inline-block;
			background-color: transparent;
			border:0;
			color:darkgray;
			height: 100%;
			vertical-align: center; 
			text-align: center;
			font-size: 15px;
			padding-right: 10px;
		}

		.navbar-icon{
			position:relative; 
			right: 0px;
			margin-right: -10px;
			width: 30px;
			padding: 0px;
			vertical-align:center;
			text-align:center;
			padding-left: 10px;
		}
		#innerReply{
			background-color:whitesmoke;
			border-bottom: 0px;
		}



		.body-container{
			padding: 1px 0px 5px 0px;
		}

        .other-details{
             background-color: white;

            flex-wrap: wrap;
            margin-top: 10px;
            padding-top: 10px;
            padding: 10px 1px 0px 1px;
        }

		.comment-card{
			padding: 10px 10px 0px 10px;
			background-color: white; 
			box-sizing: border-box;
			position: relative;
			display:block;
			font-size: 10px; 
			text-overflow:wrap;
			border-bottom: solid lightgrey 1px;
		}

		.comment-card .avatar {
            height: auto;
            width: 5%;
			display:inline-block;
            margin-right: 10px;
            float: left;

        }
        .comment-card .avatar img{
            width: 20px;
            height: 20px;
            border-radius: 50%;
        }
		 .comment-card .beside-avatar-box{
            display:inline-block;
            width: 90%;
        }

        .comment-card .beside-avatar-box .author-details p{
            display: inline;

            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
			vertical-align:center;
            color: black;
		}


		.comment-card .author-details{
			font-size:10px;
			font-weight:normal;
			color:black;
		}

		.comment-card .author-details img{
			border-radius: 50%;
		}

		.comment-card .author-details p{
			color:lightgray;
		}
		.comment-card .chosen-option{
			margin-bottom: 2px;
			font-size: 13px;

		}
		.comment-card .reason{
			margin-bottom: 5px;
			font-size:13px;
			overflow: hidden;
			
		}

		.comment-card .action-buttons{
			display: flex;
			margin-top: 10px;
			display: -webkit-flex;
			flex-direction: row;
			align-items: flex-end;
			
			justify-content: flex-end;
			width: 100%;
			
		}

		.comment-card .action-buttons button{
			border:0;
			background-color: whitesmoke;
			color: black;
			font-weight: bold;
			font-size: 10px;
			margin-right: 5px;
			padding: 5px; 
			padding-left:10px; 
			padding-right: 10px;
		}

		.comment-card .action-buttons span{
			font-weight: normal;
			margin-left: 5px;
		}
		
		.addCommentBox{
			background-color: rgb(239, 239, 239);
			padding: 20px;
			margin-bottom:10px;
			box-sizing:border-box;
		}

		.addCommentBox p{
			font-weight: bold;
			margin-bottom: 5px;

		}

		.addCommentBox textarea{
			overflow: hidden; 
			resize:none;
			box-sizing: border-box;
			display:inline-block;
			height: 50px;
			width:100%;
			padding: 10px;
			border: 0;
		}

		.addCommentBox button{
			border: 0;
			background-color: teal; 
			color: white;
			padding: 5px;
			display:block;

		}
		.addReplyReplyBox {
			background-color: whitesmoke;
			padding: 20px;
			margin-bottom:10px;
			box-sizing:border-box;
		}
		.addReplyReplyBox p{
			font-weight: bold;
			margin-bottom: 5px;

		}

		.addReplyReplyBox textarea{
			overflow: hidden; 
			resize:none;
			box-sizing: border-box;
			display:inline-block;
			height: 50px;
			width:100%;
			padding: 10px;
			border: 0;
		}

		.addReplyReplyBox button{
			border: 0;
			background-color: teal; 
			color: white;
			padding: 5px;
			display:block;

		}

	</style>
</head>


<body>

	<p style='display:none' id='conversation-id-signifier'>{{conversation.id}}</p>
	<p style='display:none' id='reply-id-signifier'> {{reply_id}}</p>
	<div id='container'>
        {%include 'not_home_navbar_template.jinja2' %}

		<div class='body-container' v-if='!loading'>
			<div class='feed-container'>
			<div class="feed-card">
				<div class="avatar">
                     <img v-if='!comment.userPic' src="https://www.w3schools.com/howto/img_avatar.png"/>
					 <img v-else :src='comment.userPic'>
                </div>

               <div class="beside-avatar-box">
                    <div class="author-details">
                        <p class="name" style='font-weight:bold;'>((comment.userName))</p>
                        <p class="username"></p>
                        <p class="action"></p>
                    </div>


                    <h2 class="chosen-option">((comment.optionChosen))</h2>
                    <p class="comment" style='white-space:;'>((comment.comment))</p>


                    <div>
                        <div class="comment-question" v-if='comment.poll' tab-index="0">
                            <p class='author-name' style='font-weight:normal; color:teal;'>Poll</p>
                            <p class='author-name' style='font-size:bold;'>((comment.poll.userName)) <span style="color:lightgray; font-weight:normal;">((comment.poll.timeAdded))</span></p>
							<p class='question'>((comment.poll.question))</p>


                        </div>
                            
							
						<div class="comment-question" v-else-if='comment.opinion' tab-index="0">
                            <p class='author-name' style='font-weight:normal; color:teal;'>Opinion</p>
                            <p class='author-name' style='font-size:bold;'>((comment.opinion.userName)) <span style="color:lightgray; font-weight:normal;">((comment.opinion.timeAdded))</span></p>
							<p class='question'>((comment.opinion.opinion))</p>


                        </div>

                    </div>

					<button @click='reply'> <i class="fas fa-reply button-icon"></i>Reply </button>
					<button @click=''><i class="far fa-thumbs-up button-icon"></i>Like</button>
						<!--<button @click="share"><i class="far fa-share-square button-icon"></i>Share</button> -->

				</div>

            </div>

			<div class='addCommentBox' v-show="intent == 'toReply'">
				<form id='comment-form'>
					<textarea type="text" placeholder='Reply' v-model='replyText' @click="autoResize" name='reply' id='comment-form'></textarea>
					<button @click='replyComment'>reply</button>
				</form>
			</div>

			<div class='other-details'>
				<div id='innerReply'>
					<comment v-for='reply in replies' :reply='reply'>
						<comment> </comment>
					</comment>

				</div>
			</div>
	</div>
	</div>
	</div>


	<div id='snackbar'></div>



	<template id='comment-template'>
		<div>
		<div class='comment-card' :id="[isInnerReply? 'innerReply' : '']">
			<div class='avatar'>
                <img v-if='reply.userPic == null'src="https://www.w3schools.com/howto/img_avatar.png"/>
			    <img v-else :src="reply.userPic"/>

			</div>

			<div class='beside-avatar-box'>
				<div class='author-details'>
					<h3 class='name' style='font-weight:bold'>((reply.userName))</h3>
					<p class='name' style='color:lightgray'>((reply.timeAdded))</p>
					<p v-if='isInnerReply' style='color:darkgrey; font-size:13px;'>Replying to ((reply.userRepliedTo))</p>

				</div> 
				<div class='reason' id=''>
					<p>((reply.reply))</p>
				</div>
				
				<p v-if='showReplyReplies' style='font-size:13px; color:teal;' @click='showReplyReplies = false'> Hide replies</p>

				
				<div class='action-buttons'> 
					<button v-if='' @click='addReply'>Reply</button> 

					<button v-if='' @click=''>Like</button> 
					<button @click='' v-if=''>Share </button>

				</div>

            </div>
		</div>
			<div class='addReplyReplyBox' v-show="intent == 'toReplyReply'">
				<form id='comment-form'>
					<textarea type="text" 
						v-model='replyReplyText'
						placeholder='Reply'  
						@click="autoResize" 
						name='reply' 
						id='comment-form'>
					</textarea>
					<button type='button' @click='replyReply'>reply</button>
				</form>
			</div>
			
			<div style='padding-left: 20px;'>
				<comment v-show='showReplyReplies' v-for='reply in replyReplies' :reply='reply'></comment>
			</div>
		</div>
	</template>




<script src="https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.3.0/Chart.bundle.js"></script>



<script type="text/javascript">
	var siteUrl = "http://localhost:6543";	
	
	var showSnackbar = function(text){
		var snackbar = document.getElementById('snackbar');
		snackbar.innerHTML = text;

    	snackbar.className = "show";

    // After 3 seconds, remove the show class from DIV
    	setTimeout(function(){ snackbar.className = snackbar.className.replace("show", ""); }, 4000);

	}


	Vue.component('comment', {
		template: '#comment-template',
		delimiters: ['((', '))'],
		props: ['reply',],
 
		data(){
			return {
				numOfShares: this.reply.numOfShares,
				numOfLikes: this.reply.numOfShares,
				intent: '',
				replyReplyText: '',
				replyReplies: [],
				showReplyReplies: false,
				isInnerReply: this.reply.type == 'replyReply',
			}
		}, 
		computed: {
			commentClass(){
				return this.isInnerReply ?  'innerReply' : '';
			}
		},
		methods:{
			autoResize(event){
				event.preventDefault();
				var textarea = event.target;
				textarea.addEventListener('input', function(){
					var currentHeight = textarea.offsetHeight;
					var scrollHeight = textarea.scrollHeight;
					if (scrollHeight > currentHeight){
						textarea.style.height = scrollHeight + 'px';
					}
				});
			},

			getReplyReplies(event){
				vm = this;
				var button = event.target;
				button.disabled = true;
				if (this.replyReplies.length == 0){
					axios.get(siteUrl + '/replies/reply_id=' + this.reply.id).then(response=>{
						var replies = response.data.replies; 

						replies.forEach(reply=>{
							this.flattenReplyReplies(reply);
						});

					}).then(response=>{
						vm.showReplyReplies = true;
						button.disabled = false;
					}).catch(error=>{
						button.disabled = false;
					});
				}

				
				else{
					this.showReplyReplies = true;
				}

			},

			flattenReplyReplies(reply){
				this.replyReplies.push(reply);
				if (reply.replies == [] || reply.replies == null){
					return 0
				}
				else{
					reply.replies.forEach(nestedReply=>{
						this.flattenReplyReplies(nestedReply);
					});
				}
			},

			addReply(){
				if (this.intent == ''){
					this.intent = 'toReplyReply';
				}
				else{
					this.intent = '';
				}
			},

			replyReply(event ){
				var replyButton = event.target;
				replyButton.disabled = true;
				vm = this;

				axios.post(siteUrl + '/reply-reply', {
					reply_id: vm.reply.id, 
					reply: vm.replyReplyText,
				}).then(response=>{
					replyButton.disabled = false;
					vm.intent ='';
					vm.replyReplyText = '';

					showSnackbar('Reply added!');
					window.location.reload();
				}).catch(error=>{
					replyButton.disabled = false;
				});
			},

			share(){
				vm = this;
				axios.post(siteUrl+'/share/', {
					reply_id: vm.reply.id,
					
				}).then(response=>{

				}).catch(error=>{
				});

			},
			
		}

	});


    new Vue({

        el: '#container',
        delimiters: ['((','))'],

        data(){
			return{
            	some: 'deji',
				loading: true,
            	comment: {}, //it'a list because we want it to be reactive.
				chosenOption: 0,
				user_logged_in: false,
				comments: [],
				replies: [], 
				replyText: '',
				activeTab: '*',
				tabs: [],
				isActiveClass: 'isActive',
				intent: '',
				canAgreeToComments: false, //this will make us know whether user can press agree on another comment
				commentToAgreeWith: 0, 
			}
             
        },


        methods:{

			autoResize(event){
				event.preventDefault();
				var textarea = event.target;
				textarea.addEventListener('input', function(){
					var currentHeight = textarea.offsetHeight;
					var scrollHeight = textarea.scrollHeight;
					if (scrollHeight > currentHeight){
						textarea.style.height = scrollHeight + 'px';
					}
				});
			},

            changeCommentData(id, value){
                this.$set(this.comment, id, value);
            },


			reply(){
				if (this.user_logged_in == false){
					return 0;
					
				}

				if (this.intent == 'toReply'){
					this.intent = '';
				}
				else{
					this.intent = 'toReply';
				}

			},

			replyComment(event){
				event.preventDefault();
				var replyButton = event.target;
				replyButton.disabled = true;
				vm = this;
				axios.post(siteUrl + '/reply-comment', {
					comment_id: vm.comment.id, 
					reply: vm.replyText,
				}).then(response=>{
					replyButton.disabled = false;
					vm.replyText = '';
					showSnackbar('Reply Added!');
					vm.intent = '';
					window.location.reload();
				}).catch(error=>{
					replyButton.disabled = false;
				});

			},	

			flattenReplyReplies(reply){
				this.replies.unshift(reply);

				if (reply.replies){
					reply.replies.forEach(r=>{
						this.flattenReplyReplies(r);
					});
				}

				else{
					return 0;
				}
			},


		},

        created(){
            vm = this;
            axios.get(siteUrl + '/get_conversation/' + "{{conversation.id}}" + '/' + "{{reply_id}}")
			
            .then(function(response){
				vm.user_logged_in = response.data.user_logged_in;
				vm.changeCommentData('optionChosen', response.data.comment.optionChosen);
                vm.changeCommentData('userName', response.data.comment.commenter);
				vm.changeCommentData('comment', response.data.comment.comment);
                vm.changeCommentData('type', response.data.comment.type);
                vm.changeCommentData('id', response.data.comment.id);
                vm.changeCommentData('userPic', response.data.comment.userPic);
				vm.changeCommentData('numOfShares', response.data.comment.numOfShares);
                vm.changeCommentData('numOfAgrees', response.data.comment.numOfAgrees);
                vm.changeCommentData('hasSharedComment', response.data.comment.hasSharedComment);
				vm.changeCommentData('timeAdded', response.data.comment.timeAdded);
				vm.changeCommentData('userIsFollowing', response.data.comment.userIsFollowing);
				vm.changeCommentData('poll', response.data.comment.poll);
				vm.changeCommentData('opinion', response.data.comment.opinion);

				var replies = response.data.replies;

				replies.forEach(reply=>{
					if(reply.id == parseInt("{[reply_id}}")){
						reply['toView'] = true;
					}

					vm.flattenReplyReplies(reply);
				});
				vm.loading = false;

				//should users be allowed to agree to a comment?
				//it all starts from knowing whether they have voted before.
				
            }).catch(function(error){
				vm.loading = false;
			    }
            
            );


        },


    });


</script>

</body>






</html>